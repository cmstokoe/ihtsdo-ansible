
- name: Check if python-pip is installed
  command: dpkg -s python-pip
  register: package_check_deb
  ignore_errors: yes

- name: include install_boto yml when package is not installed
  include: install_boto.yml
  when: package_check_deb.rc == 1  

- name: Create  EC2 instance
  ec2:
      aws_access_key: "{{ aws_ec2accesskey }}"
      aws_secret_key: "{{ aws_ec2secret }}"
      region: "{{ aws_region }}"
   #state: "{{aws_state}}"
      assign_public_ip: "{{aws_assign_ip}}"
      group_id: "{{ aws_group_id }}"
      image: "{{ aws_ami_image }}"
  #instance_profile_name: no
      instance_tags:
        Env: "{{ aws_env }}"
        Name: "{{ aws_name }}"
        Type: "{{ aws_instance_type }}"
      exact_count: "{{aws_exact_count}}"
      count_tag: 
        Env: "{{ aws_env }}"
        Name: "{{ aws_name }}"
      instance_type: "{{ aws_instance_type }}"
      key_name: "{{ aws_keyname }}"
      private_ip: "{{aws_private_ip}}"
      source_dest_check: "{{aws_source_dest_check}}"
      tenancy: "{{aws_tenancy}}"
      wait: "{{aws_wait}}"
      volumes: "{{ aws_volumes }}"
      vpc_subnet_id: "{{ aws_vpc_subnet_id }}"
      zone: "{{ aws_zone}}"
      termination_protection: "{{aws_termination_protection}}"
  register: ec2_new
  tags: ec2_create
  
#- debug: var=ec2_new

# Only going to be singluar so create var from first item 

- name: set singular item
  set_fact: ec2_newi={{item}} 
  with_items: ec2_new.instances 

- debug: var=ec2_newi 
  
#Elastic IP  
- name: associate new elastic IPs with each of the instances if set to yes (i.e new elastic ip)
  ec2_eip:
    aws_access_key: "{{ aws_ec2accesskey }}"
    aws_secret_key: "{{ aws_ec2secret }}"
    region: "{{ aws_region }}"
    device_id: "{{ec2_newi.id }}"
  when: aws_elastic_ip == "yes"  
  register: eip1  
      
- name: associate existing elastic IPs with each of the instances if set to a ip numeric
  ec2_eip:
    aws_access_key: "{{ aws_ec2accesskey }}"
    aws_secret_key: "{{ aws_ec2secret }}"
    region: "{{ aws_region }}"
    device_id: "{{ec2_newi.id }}"
    ip: "{{aws_elastic_ip}}"    
  when: aws_elastic_ip | ipv4 
  register: eip2

- name: output the eip1
  debug:
    msg: "Elastic IP  1 details is {{ eip1 }}" 
    
- name: output the eip2
  debug:
    msg: "Elastic IP  2 details is {{ eip2 }}"     

- name: set public ip from eip1
  set_fact: public_ip={{eip1.public_ip}}
  when: eip1.public_ip is defined
  
- name: set public ip from eip2
  set_fact: public_ip={{eip2.public_ip}}
  when: eip2.public_ip is defined 

- name: set public ip
  set_fact: public_ip={{ec2_newi.public_ip}}
  when: eip1.public_ip is not defined and eip2.public_ip is not defined

- name: output the public IP
  debug:
    msg: "Public IP is {{ public_ip }}" 

- name: set ec2_tag_Name when host defined
  set_fact: ec2_tag_Name={{host}}
  when: host is defined

- name: set ec2_tag_Name when host not defined
  set_fact: ec2_tag_Name={{aws_name}}
  when: host is not defined


- name: add host to in memory inventory inc ansible_host
  add_host: name={{ public_ip }} 
            groups=ec2_created
            ec2_region={{aws_region}} 
            ec2_tag_Name={{ec2_tag_Name}}
            ec2_tag_Type={{aws_instance_type}}
            ec2_tag_Environment={{aws_env}}
            ec2_ip_address={{public_ip}}

 
#- name: List all hosted zones
#  route53_facts:
#    query: hosted_zone
#  register: hosted_zones   

#- debug: var=item
#  with_items: hosted_zones.HostedZones 
  
- name: Add internal aws dns setting if a local zone is defined  
  route53:
    aws_access_key: "{{ aws_ec2accesskey }}"
    aws_secret_key: "{{ aws_ec2secret }}"
    command: create
    zone: "{{ aws_dns_local_zone }}"
    record: "{{ aws_name }}.{{ aws_dns_local_zone }}"
    type: A
    ttl: "{{ aws_dns_ttl }}"
    private_zone: true
    overwrite: true
    value: "{{ item.private_ip }}" 
  with_items: ec2_new.instances
  when: aws_dns_local_zone is defined  


- name: Wait for the instances to boot by checking the ssh port
  wait_for: host={{public_ip}} port=22 delay=60 timeout=320 state=started
