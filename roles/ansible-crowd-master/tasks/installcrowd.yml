---

- name: Ensure service is stopped
  service: name=crowd state=stopped enabled=yes
  ignore_errors: yes
 
 # Wipe dirs if re-installing: 
 
- name: Delete data dir if crowd_replace_data_dir == true
  file: path={{ crowd_datadir }} state=absent
  when: crowd_replace_data_dir == true
          
- name: Delete crowd_install_path if crowd_reinstall == true
  file: path={{ crowd_install_path }} state=absent
  when: crowd_reinstall == true

- name: Fetch installer
  get_url:
    url={{ crowd_baseurl }}/{{ crowd_installer }}
    dest={{ crowd_tmp }}/{{ crowd_installer }}
  register: fetch
  tags: install

- name: Extract installation
  shell: tar xvf {{ crowd_tmp }}/{{ crowd_installer }} -C {{ crowd_installto }} --transform='s#\(atlassian\)-#\1/#'
  when: fetch.changed or crowd_reinstall == true
  tags: install

- name: Ensure consistent file ownership
  file: path={{ crowd_install_path }} recurse=true
        owner={{ crowd_user }} group={{ crowd_user }}

- name: Ensure data dir exists
  file: path={{ crowd_datadir }} state=directory
        owner={{ crowd_user }} group={{ crowd_user }}

- name: Set data dir in tomcat config
  lineinfile:
    dest={{ crowd_install_path }}/crowd-webapp/WEB-INF/classes/crowd-init.properties
    regexp="^crowd.home"
    line="crowd.home={{ crowd_datadir }}"
  tags: install
  
- name: Ensure logs symlink exists
  file: src={{ crowd_install_path }}/apache-tomcat/logs
        path=/var/log/crowd
        state=link
  tags: install
  
- name: Ensure mysql jdbc jar symlink exists
  file: src=/usr/share/java/mysql.jar
        path={{ crowd_install_path }}/apache-tomcat/lib/mysql.jar
        state=link
  tags: install

- name: Ensure service definition exists
  template: src=service.init.ubuntu.j2 dest=/etc/init.d/crowd
            owner=root group=root mode=0755
  tags: install

- name: Ensure service is set to run
  service: name=crowd state=restarted enabled=yes
  
  
