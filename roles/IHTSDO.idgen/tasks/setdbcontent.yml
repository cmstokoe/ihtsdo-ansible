# Check the copy index code
# Need bools for :
# delete zip /unzipped content
# drop and rebuild db.
# rebuild flag which does both
#- name: Install unzip
#  apt: name=unzip state=present

- name: Remove datadir so as to spark complete rebuild
  file: path={{import_base_dir_sql}} state=absent
  when: "force_zip_download_sql == True" 

- name: make sure dataDir exists
  file: path={{import_base_dir_sql}}  state=directory
  
- debug: msg="import_base_dir_sql = {{import_base_dir_sql}}"   
- debug: msg="import_zip_file_sql = {{import_zip_file_sql}}" 
- debug: msg="import_zip_url_sql = {{import_zip_url_sql}}"

- name: make sure zip file exists
  stat: path={{import_file_dir_sql}}
  register: zipimportfile
  
- name: make sure sql file exists
  stat: path={{import_file_dir_sql_sql}}
  register: sqlimportfile
  
  

- debug: msg="zipimportfile exists = {{zipimportfile.stat.exists}}"
- debug: msg="sqlimportfile exists = {{sqlimportfile.stat.exists}}" 
- debug: msg="import_file_dir_sql_sql path = {{import_file_dir_sql_sql}}" 

- name: download sql file if url is set
  get_url: force=no url={{import_zip_url_sql}} dest={{import_file_dir_sql}} validate_certs=no mode=0440
  when: zipimportfile.stat.exists == False

- name: Unarchive termserv archive on the remote machine
  unarchive: src={{import_file_dir_sql}} dest={{import_base_dir_sql}}/ copy=no
  when: sqlimportfile.stat.exists == False

- name: make sure sql file exists
  stat: path={{import_file_dir_sql_sql}}
  register: sqlimportfile
  
- debug: msg="sqlimportfile2 path = {{import_file_dir_sql_sql}}"   
- debug: msg="sqlimportfile2 exists = {{sqlimportfile.stat.exists}}" 

- name: if present dump existing db
  mysql_db: name={{dbname}} state=absent login_user=root login_password={{mysql_root_pass}}
  when: sqlimportfile.stat.exists == True
  
- name: create db
  mysql_db: name={{dbname}} state=present login_user=root  login_password={{mysql_root_pass}}
  when: sqlimportfile.stat.exists == True
  
  
  
#- name: Run the SQL file -OLD
#  command: mysql -u {{ ts_user }} -p{{ ts_pw }} < {{ import_term_serv_sql }}
#  when: sqlimportfile.stat.exists == True
  
  
#- name: Run the SQL file -OLD
#  shell: cat {{ import_term_serv_sql }} | mysql -u {{ ts_user }} -p{{ ts_pw }};
#  when: sqlimportfile.stat.exists == True  
- name: create db from backup
  mysql_db: name={{dbname}}  state=import target={{import_file_dir_sql_sql}} login_user=root  login_password={{mysql_root_pass}}
  when: sqlimportfile.stat.exists == True
