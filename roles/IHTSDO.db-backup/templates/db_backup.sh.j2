#!/bin/bash

backup_dir="{{db_back_dir}}/{{db_type}}"

# db_type acceptable values:
# pgsql = Postgres
# mysql = MySql
db_type={{db_type}}

db_host={{db_host}}
db_port={{db_port}}
db_admin={{db_admin}}
db_include={{include_dbs}}

# If Postgres and not using default postgres admin user (postgres) 
# then instead make sure there is a Postgres .pgpass file
# ( format : localhost:5432:mydbname:postgres:mypass ) make sure chmod 600 
db_password={{db_password}} 

s3_backup_dir={{s3_backup_dir}}

# create backup dir
echo "backup dir = "${backup_dir};  
mkdir -p ${backup_dir}

# then for each db in db_include

        for db in $db_include;
        do  
                echo "db = "${db}
                ts=$(date +\%Y-\%m-%d_\%T_\%z)
                echo "ts = "${ts}
                backup_archive="${ts}-$(hostname -s)-${db}-${db_type}.gz"

if [ "$db_type" = "pgsql" ];
then
                        if [ "$db_admin" = "postgres" ]; #we assume the db is locally hosted
                        then
                                su - postgres -c "/usr/bin/pg_dump ${db}" | gzip > ${backup_dir}/${backup_archive}
                        else    
                                /usr/bin/pg_dump -U${db_admin} -h${db_host} -p${db_port} ${db} | gzip > ${backup_dir}/${backup_archive}
                        fi
 fi      
 if [ "$db_type" = "mysql" ];
then      
      /usr/bin/mysqldump  --single-transaction --routines --triggers --user=$db_admin -p$MYSQL_PASSWORD  $db | gzip > ${backup_dir}/${backup_archive}   
 fi               
    done 

if [ -d $backup_dir ] && [ "$backup_dir" != "" ] ;
then   
echo "Deleting old back ups backup dir = "${backup_dir}; 
find ${backup_dir}/* -mtime +5 -exec rm {} \;
fi
echo "s3_backup_dir = "$s3_backup_dir;
# sync to amazon if s3 dest is defined & the ~/.aws/config file exists
if [ -f ~/.aws/config ] && [ "$s3_backup_dir" != "" ];
then
echo "Transferring backup to AWS S3";
/usr/bin/aws s3 sync ${backup_dir} $s3_backup_dir --delete;
echo "Backup transferred";
echo "Backup process complete";
fi