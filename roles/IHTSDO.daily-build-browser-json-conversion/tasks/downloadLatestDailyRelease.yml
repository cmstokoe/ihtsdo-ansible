---
- name: Remove daily_build so as to spark complete rebuild
  file: path={{daily_build_dir}} state=absent
  when: "force_zip_download == True"

- name: make sure daily_build_dir exists
  file: path={{daily_build_dir}}  state=directory
  
- debug: msg="daily_build_dir= {{daily_build_dir}}"   

- debug: msg="dailybuild_url= {{dailybuild_url}}"   

#- name: Get build list and save to buildList.txt
#  get_url: url={{ dailybuild_url }} dest={{daily_build_dir}}/buildList.txt validate_certs=no timeout=30
  
- name: Get build list and save to buildList.txt
  shell: "/usr/bin/curl -s {{ dailybuild_url }} > {{daily_build_dir}}/buildList.txt"

- name: Get latest build status
  shell: "cat {{daily_build_dir}}/buildList.txt | grep 'status' | head -1 | cut -d ':' -f2 | cut -d ',' -f1 | tr -d '\"'| tr -d ' '| uniq"
  register: buildStatus
   
- debug: msg="buildStatus={{buildStatus.stdout}}"

# Check build date instead of relying on "latest" which may be days old.

- name: Get latest build date
  shell: "cat {daily_build_dir}}/buildList.txt | grep 'creationTime' | head -1 | cut -d ':' -f2-4 | cut -d ',' -f1 | tr -d '\"'| tr -d ' '| uniq"
  register: builddate

- set_fact: timenow="{{ ansible_date_time.iso8601 }}"
- set_fact: builddate1="{{ builddate.stdout }}"
- set_fact: timeindays="{{ (timenow[:19] | to_datetime(date_fmt) - builddate1[:19] | to_datetime(date_fmt)).days }}"    
    
- set_fact: timeinseconds="{{ (timenow[:19] | to_datetime(date_fmt) - (builddate1[:19] | to_datetime(date_fmt))).seconds }}"  
- set_fact: timeinhours="{{timeinseconds|int / 3600}}"  
                 
- name: time now
  debug:
    msg: "hours = {{timenow}}"   
        
- name: build date
  debug:
    msg: "build date = {{builddate1}}"
         
- name: time in days
  debug:
    msg: "days = {{timeindays}}"    
        
- name: time in hours
  debug:
    msg: "hours = {{timeinhours}}"    

- name: time in seconds
  debug:
    msg: "seconds = {{timeinseconds}}"                          
        
- fail:
    msg: "The daily build build file is more than a day old. Age in days = {{timeindays}}"
  when: timeindays|int > {{allowed_days}}    


- name: Get latest build output url and save to latestOutputUrl.txt
  shell: "cat {{daily_build_dir}}/buildList.txt | grep 'outputfiles_url' | head -1 |  cut -d ',' -f1 > {{daily_build_dir}}/latestOutputUrl.txt"
  when: buildStatus.stdout == "BUILT"

- name: Retrieve the latest build output url from latestOutputUrl.txt
  shell: "cat {{daily_build_dir}}/latestOutputUrl.txt | cut -d '\"' -f4 | uniq"
  register: buildOutputUrl
  when: buildStatus.stdout == "BUILT"
  
- debug: msg="buildOutputUrl= {{ buildOutputUrl.stdout }}"
- debug: msg="downloading {{ buildOutputUrl.stdout }}/{{release_file_name}}"
  
- name: download release zip file if daily build is successful
  get_url: force=no url={{buildOutputUrl.stdout}}/{{release_file_name}} dest={{daily_build_dir}}/{{release_file_name}} validate_certs=no mode=0440 timeout=120
  when: buildStatus.stdout == "BUILT"


#- name: download release zip file uing curl if daily build is successful
#  shell: "/usr/bin/curl -s {{buildOutputUrl.stdout}}/{{release_file_name}} > {{daily_build_dir}}/{{release_file_name}}"
#  when: buildStatus.stdout == "BUILT"  

- name: make sure release zip file exists
  stat: path={{daily_build_dir}}/{{release_file_name}}
  register: releaseZipfile
   
- name: Unarchive release zip file on the remote machine
  unarchive: src={{daily_build_dir}}/{{release_file_name}}  dest={{daily_build_dir}} copy=no
  when: releaseZipfile.stat.exists == True
