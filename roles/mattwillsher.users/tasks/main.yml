---
- name: include users file
  include_vars: "{{ inventory_dir }}/../files/users/users.yml"

- name: Install adduser.conf to make sure no uid/gid number collisions
  template: src=adduser.conf.j2 dest=/etc/adduser.conf
            owner=root group=root mode=0644
- name: Group creation
  group: gid={{ item.value.gid }} name={{ item.key }} state=present
  with_dict: '{{ user_groups }}'

- name: Group deletion
  group: name={{ item.key }} state=absent
  with_dict: '{{  user_groups_deleted }}'

- name: Per-user group creation
  group: name={{ item.value.username }} gid={{ item.value.uid }}
  with_dict: '{{ users }}'
  when: '{{ users_create_per_user_group }}'

- name: User creation
  user: name={{ item.value.username }}
        group={{ item.value.username if users_create_per_user_group else users_group }}
        groups={{ item.value.groups | join(',') }}
        shell={{ item.value.shell if item.value.shell is defined else users_default_shell }}
        comment="{{ item.key }}"
        uid={{ item.value.uid }}
        createhome={{ 'yes' if users_create_homedirs else 'no' }}
  with_dict: '{{ users }}'

- name: SSH keys
  authorized_key: user={{ item.0.username }} key="{{ item.1 }}"
  with_subelements:
    - users
    - ssh_keys

- debug: msg="Deleting users  {{ item }} "
  with_items: '{{ users_deleted }}'

- name: pkill any processes owned by users about to be deleted.
  shell: /usr/bin/pkill -u {{ item }} || true
  with_items: '{{ users_deleted }}'

- name: Deleted user removal
  user: name={{ item }} state=absent
  with_items: '{{ users_deleted }}'

- name: Deleted per-user group removal
  group: name={{ item }} state=absent
  with_items: '{{ users_deleted }}'
  when: '{{ users_create_per_user_group }}'
  
#- name: Update Apt cache
#  apt: update_cache=yes cache_valid_time=3600
#  sudo: yes  
  
#- name: Install zip
#  apt: name=zip state=present update_cache=yes cache_valid_time=300  

#- name: Install unzip
#  apt: name=unzip state=present update_cache=yes cache_valid_time=300
