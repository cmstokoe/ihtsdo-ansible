---
- name: Install the selinux python module
  yum: name=libselinux-python state=present
  when: ansible_os_family == "RedHat"
  tags:
    - nginx

- name: Copy the epel packages
  copy: src=epel.repo dest=/etc/yum.repos.d/epel_ansible.repo
  when: ansible_os_family == "RedHat"
  tags:
    - nginx

- name: Install the nginx packages
  yum: name={{ item }} state=present
  with_items: redhat_pkg
  when: ansible_os_family == "RedHat"
  tags:
    - nginx

- name: Install python-apt
  apt: name="python-apt" state=present
    
- name: Add nginx root ppa apt_key
  apt_key: url=http://nginx.org/keys/nginx_signing.key state=present
  when: ansible_os_family == "Debian"

- name: Add nginx mainline ppa
  apt_repository: repo='deb http://nginx.org/packages/mainline/ubuntu/ trusty nginx' state=present 
  when: ansible_os_family == "Debian"

- name: Update apt cache
  apt: update_cache="yes"  
  when: ansible_os_family == "Debian"  

- name: Install python-selinux  
  apt: name="python-selinux" state=present
  when: ansible_os_family == "Debian"

- name: Install nginx
  apt: name="nginx={{ nginx_version }}" state=present update_cache=yes cache_valid_time=3600
  when: ansible_os_family == "Debian"

- name: Pin nginx at a known version
  shell: "sudo apt-mark hold nginx"

- name: Create the directories for site specific configurations
  file: path=/etc/nginx/{{ item }} state=directory owner=root group=root mode=0755
  with_items:
    - "sites-available"
    - "sites-enabled"
  tags:
    - nginx

- name: Copy the nginx configuration file
  template: src=nginx.conf.j2 dest=/etc/nginx/nginx.conf
  notify:
   - restart nginx
  tags:
    - nginx

- name: Copy the nginx default configuration file
  template: src=default.conf.j2 dest=/etc/nginx/conf.d/default.conf
  tags:
    - nginx

- name: Copy the nginx default site configuration file
  template: src=default.j2 dest=/etc/nginx/sites-available/default
  tags:
    - nginx

- name: Create the link for site enabled specific configurations
  file: path=/etc/nginx/sites-enabled/default state=link src=/etc/nginx/sites-available/default
  tags:
    - nginx

- name: Generate dhparams
  command: openssl dhparam -out /etc/nginx/dhparam.pem 2048 creates=/etc/nginx/dhparam.pem
  tags:
    - nginx

- name: Create the configurations for sites
  template: src=site.j2 dest=/etc/nginx/conf.d/{{ item['server']['file_name'] }}.conf
  with_items: nginx_sites
  when: nginx_sites|lower != 'none'
  notify:
   - reload nginx
  tags:
    - nginx

- name: Remove the default site
  file: path=/etc/nginx/sites-enabled/default state=absent

- name: start the nginx service
  service: name=nginx state=started 
  tags:
    - nginx

#- name: allow HTTP traffic
#  ufw: name='Nginx HTTP' rule=allow
#  when: nginx_ufw_allow_http == true

#- name: allow HTTPS traffic
#  ufw: name='Nginx HTTPS' rule=allow
#  when: nginx_ufw_allow_https == true
   
#- name: Reload the firewall  
#  ufw: state=reloaded  


