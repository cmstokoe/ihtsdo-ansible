- name: Remove datadir so as to spark complete rebuild
  file: path={{rel_base_dir}} state=absent
  when: "force_zip_download == True" 

- name: make sure dataDir exists
  file: path={{rel_base_dir}}  state=directory
  
- debug: msg="rel_base_dir= {{rel_base_dir}}"   
- debug: msg="intl_url = {{intl_url}}"
- debug: msg="intl_zip_file = {{intl_zip_file}}"
- debug: msg="ext_url = {{ext_url}}"
- debug: msg="ext_zip_file = {{ext_zip_file}}"

- name: make sure intl zip file exists
  stat: path={{rel_base_dir}}/{{intl_zip_file}}
  register: intlzipfile
  
- name: Remove intl_dir 
  file: path={{intl_dir}} state=absent

- name: make sure intl_dir exists
  file: path={{intl_dir}}  state=directory

- name: Remove ext_dir 
  file: path={{ext_dir}} state=absent

- name: make sure ext_dir exists
  file: path={{ext_dir}}  state=directory
  
- name: make sure ext zip file exists
  stat: path={{rel_base_dir}}/{{ext_zip_file}}
  register: extzipfile  
  
- name: download intl zip file if url is set
  get_url: force=no url={{intl_url}}/{{intl_zip_file}} dest={{rel_base_dir}}/{{intl_zip_file}} validate_certs=no mode=0440
  when: intlzipfile.stat.exists == False
  
- name: download ext zip file if url is set
  get_url: force=no url={{ext_url}}/{{ext_zip_file}} dest={{rel_base_dir}}/{{ext_zip_file}} validate_certs=no mode=0440
  when: extzipfile.stat.exists == False
 
- name: make sure intl zip file exists
  stat: path={{rel_base_dir}}/{{intl_zip_file}}
  register: intlzipfile2  
 
- name: make sure ext zip file exists
  stat: path={{rel_base_dir}}/{{ext_zip_file}}
  register: extzipfile2  
 
- name: Unarchive intl zip file on the remote machine
  unarchive: src={{rel_base_dir}}/{{intl_zip_file}} dest={{intl_dir}} copy=no
  when: intlzipfile2.stat.exists == True
  
- name: Unarchive ext zip file on the remote machine
  unarchive: src={{rel_base_dir}}/{{ext_zip_file}} dest={{ext_dir}} copy=no
  when: extzipfile2.stat.exists == True
  
  