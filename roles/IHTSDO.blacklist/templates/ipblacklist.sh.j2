#!/usr/bin/env bash

MY_PATH={{ blacklist_base_dir }}
IP_BLACKLIST=ipblacklist
IP_WHITELIST=ipwhitelist
MAXELEM=256000
BLACKLISTS=(
    "file:///opt/ipblacklist/ihtsdo-global.blacklist" #Ansible controlled
    "file:///opt/ipblacklist/ihtsdo-local.blacklist"  #local to that host / service (additions by hand)
    "http://www.projecthoneypot.org/list_of_ips.php?t=d&rss=1" # Project Honey Pot Directory of Dictionary Attacker IPs
    "https://check.torproject.org/cgi-bin/TorBulkExitList.py?ip=1.1.1.1"  # TOR Exit Nodes
    "https://www.maxmind.com/en/proxy-detection-sample-list" # MaxMind GeoIP Anonymous Proxies
    "http://danger.rulez.sk/projects/bruteforceblocker/blist.php" # BruteForceBlocker IP List
    "https://www.spamhaus.org/drop/drop.lasso" # Spamhaus Dont Route Or Peer List (DROP)
    "http://cinsscore.com/list/ci-badguys.txt" # C.I. Army Malicious IP List
    "https://www.openbl.org/lists/base.txt"  # OpenBL.org 30 day List
    "https://lists.blocklist.de/lists/all.txt" # blocklist.de attackers
    "https://www.stopforumspam.com/downloads/toxic_ip_cidr.txt" # StopForumSpam
    "http://blocklist.greensnow.co/greensnow.txt" # GreenSnow
    "https://raw.githubusercontent.com/firehol/blocklist-ipsets/master/firehol_level1.netset" # Firehol Level 1
    # "http://ipverse.net/ipblocks/data/countries/xx.zone" # Ban an entire country, see http://ipverse.net/ipblocks/data/countries/
)

WHITELISTS=(
    "file:///opt/ipblacklist/ihtsdo-global.whitelist" #Ansible controlled
    "file:///opt/ipblacklist/ihtsdo-local.whitelist"  #local to that host / service (by hand)
)

main() {

    if [[ $1 = "start" || $1 = "restart" || $1 = "reload" ]]; then
        #Create dynamic lists
        build-list BLACKLISTS "$IP_BLACKLIST"
        build-list WHITELISTS "$IP_WHITELIST"

        #setup iptables
        stop-action
        start-action

    elif [[ $1 = "stop" ]]; then

        stop-action
        ipset destroy $IP_BLACKLIST
        ipset destroy $IP_WHITELIST

    else

        echo "USAGE: start, stop, restart and reload"
    fi
}

start-action() {
        iptables -t nat -A PREROUTING -i eth0 -p tcp -m set --match-set $IP_WHITELIST src -j RETURN
        iptables -t nat -A PREROUTING -i eth0 -p tcp -m set --match-set $IP_WHITELIST src -j RETURN
        iptables -t nat -A PREROUTING -i eth0 -p tcp -m set --match-set $IP_BLACKLIST src --dport 80 -j REDIRECT --to-port 4080
        iptables -t nat -A PREROUTING -i eth0 -p tcp -m set --match-set $IP_BLACKLIST src --dport 443 -j REDIRECT --to-port 4443
}

stop-action() {
        iptables -t nat -D PREROUTING -i eth0 -p tcp -m set --match-set $IP_WHITELIST src -j RETURN
        iptables -t nat -D PREROUTING -i eth0 -p tcp -m set --match-set $IP_WHITELIST src -j RETURN
        iptables -t nat -D PREROUTING -i eth0 -p tcp -m set --match-set $IP_BLACKLIST src --dport 80 -j REDIRECT --to-port 4080
        iptables -t nat -D PREROUTING -i eth0 -p tcp -m set --match-set $IP_BLACKLIST src --dport 443 -j REDIRECT --to-port 4443
}

build-list() {

   array=$1[@]
   a=("${!array}")
   rm -rf $2
   for i in "${a[@]}"
   do
    touch .provider.tmp "$MY_PATH/lists/$2"
    let HTTP_RESP=`curl -L --connect-timeout 10 --max-time 10 -o .provider.tmp -s -w "%{http_code}" "$i"`
    grep -Po '(?:\d{1,3}\.){3}\d{1,3}(?:/\d{1,2})?' ".provider.tmp" >> .list.tmp
    COUNT=$(cat .provider.tmp | wc -l)
    echo "$i yielded ${COUNT} IP Addresses"
    rm -rf .provider.tmp
   done
   sed -r -e '/^(10\.|127\.|172\.16\.|192\.168\.)/d' .list.tmp | sort -n|sort -mu >| "$MY_PATH/lists/$2"
   rm -rf .list.tmp
   sed -rn -e '/^#|^$/d' \
    -e "s/^([0-9./]+).*/add $2-tmp \1/p" "$MY_PATH/lists/$IP_BLACKLIST" >> .list.set
   ipset create $2 -exist hash:net family inet hashsize ${HASHSIZE:-16384} maxelem ${MAXELEM:-65536}
   ipset create $2-tmp -exist hash:net family inet hashsize ${HASHSIZE:-16384} maxelem ${MAXELEM:-65536}
   ipset -file .list.set restore
   ipset swap $2-tmp $2
   ipset destroy $2-tmp

}

main "$@"
