
- debug: msg="restore_fromhostname = {{restore_fromhostname}}"

- name:  set restore_app_name from val in {{restore_fromhostname}}
  set_fact: 
   restore_app_name: "{{ hostvars[item]['backup_app_name'] }}"
  with_items: "{{restore_fromhostname}}" 
  when: hostvars[item]['backup_app_name']  is defined 


- name:  set backup_level from val in {{restore_fromhostname}}  
  set_fact: 
   backup_level: "{{ hostvars[item]['backup_level'] }}"
  with_items: "{{restore_fromhostname}}" 
  when: hostvars[item]['backup_level']  is defined


- name:  set backup_s3_backup_dir from val in {{restore_fromhostname}} using backup_level
  set_fact: 
   backup_s3_backup_dir: "{{backup_s3_backup_dir_prefix}}{{ hostvars[item]['backup_level'] }}"
  with_items: "{{restore_fromhostname}}" 
  when: hostvars[item]['backup_level']  is defined 


- name:  set backup_s3_backup_dir from val in {{restore_fromhostname}}  
  set_fact: 
   backup_s3_backup_dir: "{{ hostvars[item]['backup_s3_backup_dir'] }}"
  with_items: "{{restore_fromhostname}}" 
  when: hostvars[item]['backup_s3_backup_dir']  is defined  


- name:  set backup_s3_backup_region from val in {{restore_fromhostname}}  
  set_fact: 
   backup_s3_backup_region: "{{ hostvars[item]['backup_s3_backup_region'] }}"
  with_items: "{{restore_fromhostname}}" 
  when: hostvars[item]['backup_s3_backup_region']  is defined
 
 
- debug: msg="restore_db_host = {{restore_db_host}}" 
- name:  set restore_db_host from val in {{restore_fromhostname}}  
  set_fact: 
   restore_db_host: "{{ hostvars[item]['backup_db_host'] }}"
  with_items: "{{restore_fromhostname}}" 
  when: hostvars[item]['backup_db_host']  is defined

- debug: msg="restore_db_port = {{restore_db_port}}"

- name:  set restore_db_port from val in {{restore_fromhostname}}  
  set_fact: 
   restore_db_port: "{{ hostvars[item]['backup_db_port'] }}"
  with_items: "{{restore_fromhostname}}" 
  when: hostvars[item]['backup_db_port']  is defined    
  
- debug: msg="restore_db_user = {{restore_db_user}}"
- name:  set restore_db_user from val in {{restore_fromhostname}}    
  set_fact: 
   restore_db_user: "{{ hostvars[item]['backup_db_user'] }}"
  with_items: "{{restore_fromhostname}}" 
  when: hostvars[item]['backup_db_user']  is defined    

- name:  set restore_db_password from val in {{restore_fromhostname}}
  set_fact: 
   restore_db_password: "{{ hostvars[item]['backup_db_password'] }}"
  with_items: "{{restore_fromhostname}}" 
  when: hostvars[item]['backup_db_password']  is defined
  
- debug: msg="restore_db_type = {{restore_db_type}}"
- name:  set restore_db_type from val in {{restore_fromhostname}}
  set_fact: 
   restore_db_type: "{{ hostvars[item]['backup_db_type'] }}"
  with_items: "{{restore_fromhostname}}" 
  when: hostvars[item]['backup_db_type']  is defined  

- name:  set restore_db_type from local_restore_db_type if set  
  set_fact: 
   restore_db_type: "{{ local_restore_db_type }}"
  when: not (local_restore_db_type is undefined or local_restore_db_type is none or local_restore_db_type | trim == '')


- name:  set restore_db_names from val in {{restore_fromhostname}}  
  set_fact: 
   restore_db_names: "{{ hostvars[item]['backup_db_names'] }}"
  with_items: "{{restore_fromhostname}}" 
  when: hostvars[item]['backup_db_names']  is defined   

- debug: msg="restore_dir_owner = {{restore_dir_owner}}" 
- name:  set restore_dir_owner from val in {{restore_fromhostname}}  
  set_fact: 
   restore_dir_owner: "{{ hostvars[item]['backup_dir_owner'] }}"
  with_items: "{{restore_fromhostname}}" 
  when: hostvars[item]['backup_dir_owner']  is defined  and  (restore_dir_owner  is undefined or restore_dir_owner is none or restore_dir_owner | trim == '' )  

- debug: msg="restore_dirs_to_copy = {{restore_dirs_to_copy}}"  
- name:  set restore_dirs_to_copy from val in {{restore_fromhostname}}  
  set_fact: 
   restore_dirs_to_copy: "{{ hostvars[item]['backup_dirs_to_copy'] }}"
  with_items: "{{restore_fromhostname}}" 
  when: hostvars[item]['backup_dirs_to_copy']  is defined  and  (restore_dirs_to_copy  is undefined or restore_dirs_to_copy is none or restore_dirs_to_copy | trim == '' )      

- debug: msg="restore_dirs_to_copy1 = {{restore_dirs_to_copy}}"

- name:  set restore_dirs_to_copy to empty if set to no 
  set_fact: 
   restore_dirs_to_copy: ""
  when: restore_dirs is defined and restore_dirs == no

- debug: msg="restore_dirs_to_copy2 = {{restore_dirs_to_copy}}"

- set_fact: 
   restore_hostname: "{{restore_fromhostname}}"


- debug: msg="restore_app_name = {{restore_app_name}}"
- debug: msg="backup_level = {{backup_level}}"
- debug: msg="backup_s3_backup_dir = {{backup_s3_backup_dir}}"
- debug: msg="backup_s3_backup_region = {{backup_s3_backup_region}}"
- debug: msg="restore_db_type = {{restore_db_type}}"
- debug: msg="restore_db_host = {{restore_db_host}}"
- debug: msg="restore_db_user = {{restore_db_user}}"
- debug: msg="restore_db_port = {{restore_db_port}}"
- debug: msg="restore_db_names = {{restore_db_names}}"
- debug: msg="restore_dir_owner = {{restore_dir_owner}}"
- debug: msg="restore_dirs_to_copy = {{restore_dirs_to_copy}}"


#restore_dir: "/opt/backup/{{restore_app_name}}"
#restore_s3_restore_dir: "{{backup_s3_backup_dir}}"
#restore_s3_restore_region: "{{backup_s3_backup_region}}"
#restore_db_host: "{{backup_db_host}}"
#restore_db_port: "{{backup_db_port}}"
#restore_db_user: "{{backup_db_user}}"
#restore_db_password: "{{backup_db_password}}"
#restore_dir_owner: "{{backup_dir_owner}}"  

#A list of directories to copy:
#restore_dirs_to_copy: "{{backup_dirs_to_copy}}"

#Database info  
#mysql, postgresql or none. Default to mysql on localhost as most are
#backup_db_type: "none"
#restore_db_type: "{{backup_db_type}}"
#backup_db_type: "pgsql"
# names of db'es to back up. if not set will back up all
#restore_db_names: "{{backup_db_names}}"