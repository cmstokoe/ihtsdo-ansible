#!/bin/bash

cp_cmd="/usr/bin/aws s3 cp "

#dirs to restore :
dirs_to_restore=({% for restore_dir in restore_dirs_to_copy %}"{{restore_dir}}" {% endfor %})
#pre restore commands
precmds=({% for precmd in restore_precmds %}"{{precmd}}" {% endfor %})
#post restore commands
postcmds=({% for postcmd in restore_postcmds %}"{{postcmd}}" {% endfor %})

#restore_dbcmds
#restore_precopycmds
 
# db_type acceptable values:
# pgsql = Postgres
# mysql = MySql
# none = no db just files to back up.
db_type={{restore_db_type}}
db_host={{restore_db_host}}
db_port={{restore_db_port}}
db_include=({% for db in restore_db_names %}"{{db}}" {% endfor %})

# If Postgres and not using default postgres admin user (postgres) 
# then instead make sure there is a Postgres .pgpass file
# ( format : localhost:5432:mydbname:postgres:mypass ) make sure chmod 600 
db_user={{restore_db_user}}
db_password={{restore_db_password}} 

PERIOD="{{ restore_s3_restore_dir_period | default('daily') }}"

HOST_NAME="{{restore_hostname}}"
APP_NAME="{{restore_app_name}}"

# The timestamp suffix for the top-level directory, eg. 20120904_1021
CURRENT_DATE=`date +%Y%m%d_%H%M`
# The S3 backup dir
s3_backup_dir="{{ backup_s3_backup_dir | default('') }}"
s3_backup_dir_prefix="s3://$s3_backup_dir"
s3_backup_dir_suffix="$HOST_NAME/$APP_NAME/"

s3_backup_dir_daily="$s3_backup_dir_prefix/$PERIOD/$s3_backup_dir_suffix"
s3_backup_region_base="{{ backup_s3_backup_region | default('') }}"

restore_file="{{restore_file}}"
restore_base_url="{{restore_base_url}}"
restore_dir_owner={{restore_dir_owner | default('')}}


s3_restore_dir="{{ restore_s3_restore_dir | default('') }}"
s3_restore_region_base="{{ restore_s3_restore_region | default('') }}"
s3_restore_filename="{{ restore_s3_restore_filename | default('') }}"

if [ "x$s3_restore_dir" != "x" ]; then
s3_restore_dir="s3://$s3_restore_dir"
echo "s3 added and now: "$s3_restore_dir
else
## use the daily dir
      s3_restore_dir="$s3_backup_dir_daily"
      s3_restore_region_base="$s3_backup_region_base"
      echo "using daily setting s3_restore_dir to $s3_restore_dir"
fi

s3_restore_region=""
if [ "x$s3_restore_region_base" != "x" ]; then
      s3_restore_region="--region $s3_restore_region_base"
      echo "setting restore region to $s3_restore_region"      
fi


# The starting directory
restore_dir={{ restore_dir }}

# The dir where zips go
tmp_restore_dir=$restore_dir/tmp

# Prints a message to stdout with the current date and time.
echo_date() {
	echo -e "[`date +\"%Y-%m-%d %H:%M:%S\"`] $@"
}

# Prints an error message to stderr and exits the script with a non-zero status.
error_exit() {
	echo -e "[`date +\"%Y-%m-%d %H:%M:%S\"`] $@" >&2
	exit 1
}

# Checks input arguments and test whether the script is ready to be executed.
check_arguments() {
	if [ "x$restore_dir" = "x" ]; then
		error_exit "Please set the variable restore_dir before running this script. Exiting with error."
	fi
	
	if [ "x$s3_restore_dir" = "x" ]; then	
		if [ "x$s3_backup_dir" = "x" ]; then
			error_exit "Please set the variable s3_backup_dir before running this script. Exiting with error."
		fi	
		if [ "x$HOST_NAME" = "x" ]; then
			error_exit "Please set the variable HOST_NAME before running this script. Exiting with error."
		fi	
		if [ "x$APP_NAME" = "x" ]; then
			error_exit "Please set the variable APP_NAME before running this script. Exiting with error."
		fi			
	fi
	if [ "x$db_type" = "x" ]; then
		error_exit "Please set the variable db_type before running this script. Exiting with error."
	fi
	if [ "$db_type" != "none" ]; then
	# If not none check db vars are set
	if [ "x$db_host" = "x" ]; then
		error_exit "Please set the variable db_host before running this script. Exiting with error."
	fi

	if [ "x$db_port" = "x" ]; then
		error_exit "Please set the variable db_port before running this script. Exiting with error."
	fi
	
	if [ "x$db_include" = "x" ]; then
		error_exit "Please set the variable db_include before running this script. Exiting with error."
	fi

	if [ "x$db_user" = "x" ]; then
		error_exit "Please set the variable db_user before running this script. Exiting with error."
	fi
	
	if [ "x$db_password" = "x" ]; then
		error_exit "Please set the variable db_password before running this script. Exiting with error."
	fi
	fi
}


# Main script starts here.
main() {
	echo_date "----------------------------"
	check_arguments
	pre_cmd
	mkrestoredir
	getbackupfile
	decompress
	copyfiles
	if [ "$db_type" != "none" ]; then
	restore_db
	fi
	
	#rsyncfiles
    post_cmd
	
}

pre_cmd(){
if [ "x$precmds" != "x" ]; then
IFS=$(echo -en "\n\b")
for cmd in ${precmds[*]};
        do
        echo_date "Pre cmd About to do cmd : $cmd"
        eval $cmd
        done
fi
}

post_cmd(){
echo "post_cmd postcmds = $postcmds"
if [ "x$postcmds" != "x" ]; then
IFS=$(echo -en "\n\b")
for cmd in ${postcmds[*]};
        do
        echo_date "Post cmd About to do cmd : $cmd"
        eval $cmd
        done
fi

}

restore_db(){
cd $tmp_restore_dir
echo "tmp_restore_dir = $tmp_restore_dir"
cd $(ls -d */|head -n 1)
echo "currently in " $PWD
# then for each db in db_include
  for db in ${db_include[*]};
   do  
    echo "db = "${db}
    DATABASE_DUMP_FILE="${db}.sql"
    echo "DATABASE_DUMP_FILE = ${DATABASE_DUMP_FILE}"
     if [ "$db_type" = "pgsql" ];
      then
        echo "dbtype = postgres : " $db_type
          if [ "$db_user" = "postgres" ]; #we assume the db is locally hosted
            then
             if [ "$db" = "all" ];
              then 
              echo "using postgres user to restore all"
               su - postgres -c "/usr/bin/psql -f '$PWD/$DATABASE_DUMP_FILE'"
              else
              echo "using postgres user to restore ${db} using $PWD/$DATABASE_DUMP_FILE"
               su - postgres -c "/usr/bin/psql -c 'DROP DATABASE IF EXISTS ${db}'"
               su - postgres -c "/usr/bin/psql -c 'CREATE DATABASE ${db}'"
               su - postgres -c "/usr/bin/psql -d ${db}  -f '$PWD/$DATABASE_DUMP_FILE'"
            fi                       
          else 
            if [ "$db" = "all" ];
              then
               /usr/bin/psql -h${db_host} -p${db_port} -f "$PWD/$DATABASE_DUMP_FILE"
              else   
               /usr/bin/psql -h${db_host} -p${db_port} -c 'DROP DATABASE IF EXISTS ${db}'"
               /usr/bin/psql -h${db_host} -p${db_port} -c 'CREATE DATABASE ${db}'"
               /usr/bin/psql -h${db_host} -p${db_port} ${db} -f "$PWD/$DATABASE_DUMP_FILE"
              fi                                  
          fi
    fi      
     if [ "$db_type" = "mysql" ];
      then 
       if [ "$db" = "all" ];
        then 
         echo "MySql restoring all";
         /usr/bin/mysql -u${db_user} -p${db_password}   < ./$DATABASE_DUMP_FILE
        else
         echo "MySql restoring : ${db}";
         /usr/bin/mysql -u${db_user} -p${db_password} -e "DROP DATABASE IF EXISTS ${db};"
         /usr/bin/mysql -u${db_user} -p${db_password} -e "CREATE DATABASE ${db};"
         /usr/bin/mysql -u${db_user} -p${db_password} ${db} < ./$DATABASE_DUMP_FILE
      fi  
 fi               
    done 
	echo_date "Done restoring up DB."

}



copyfiles(){
echo "copyfiles restore_file = $restore_file"
cd $tmp_restore_dir
cd $(ls -d */|head -n 1)
echo "currently in " $PWD
echo "restore_dir_owner = $restore_dir_owner"
for dir in ${dirs_to_restore[*]};
        do  
        echo "Copying dir = .${dir} to ${dir}"
        rm -rf ${dir}
        cp --recursive .${dir} ${dir} 
        if [ "x$restore_dir_owner" != "x" ]; then
        /bin/chown -R $restore_dir_owner:$restore_dir_owner ${dir}
        fi
        done 
	echo_date "Done Copying files."
}

rsyncfiles(){
for dir in ${dirs_to_backup[*]};
        do  
        echo "rsyncing dir = "${dir} " to " $ABSOLUTE_ARCHIVE_PREFIX
        /usr/bin/rsync  -av --delete --no-compress ${dir} $ABSOLUTE_ARCHIVE_PREFIX
        done 
	echo_date "Done rsync'ing files."
}


mkrestoredir(){
# first delete if there
echo "should be deleting and recreating $tmp_restore_dir"
rm -rf $tmp_restore_dir
echo_date "Create backup destination directory '$ABSOLUTE_ARCHIVE_PREFIX'."
mkdir -pv "$tmp_restore_dir" || error_exit "Couldn't create directory '$tmp_restore_dir'. Exiting with error.";
}


getbackupfile(){
# if restore_base_url use it:
 if [ "x$restore_base_url" != "x" ]; 
    then
      echo "restore_base_url and set to  "$restore_base_url;
# first check for s3 and if so get
     if [[ "$restore_base_url" == s3* ]];
        then 
         echo "restore_base_url is s3 ";
         getbackupawsurl;
        else
         echo "not s3 using wget";
         getbackupurl;
        fi           
    else 
     echo "restore_base_url not set so getting from S3 using restore_s3_restore_dir = "$restore_s3_restore_dir
     getbackupawsdir;
    fi
}

decompress(){
cd $tmp_restore_dir
echo "tmp_restore_dir = $tmp_restore_dir"
echo "currently in " $PWD
echo "decompressing all zips in $tmp_restore_dir"
unzip *.zip
}

getbackupawsurl(){
echo "getbackupawsurl cmd = "$cp_cmd  $restore_base_url$restore_file $tmp_restore_dir/$restore_file $s3_restore_region;

	if $cp_cmd  $restore_base_url$restore_file $tmp_restore_dir/$restore_file $s3_restore_region; then
		echo "Downloaded $restore_base_url$restore_file to $tmp_restore_dir";
	else
		error_exit
	fi

}

getbackupawsdir(){

echo "getbackupawsdir s3_restore_dir = "$s3_restore_dir;
 if [ "x$restore_file" != "x" ]; 
   then
     echo "restore_file not empty and = "$restore_file;
     	if $cp_cmd $s3_restore_dir$restore_file $tmp_restore_dir/$restore_file $s3_restore_region; then
		echo "Downloaded $restore_file to $tmp_restore_dir";
	else
		error_exit
	fi
   else
     echo "restore_file  finding most recent"
     LATEST=`aws s3 ls $s3_restore_dir  $s3_restore_region | sort | tail -n 1 | awk '{print $4}'`
     restore_file=$LATEST
     echo "getbackupawsdir restore_file = $restore_file"
	if $cp_cmd $s3_restore_dir$LATEST $tmp_restore_dir/$LATEST $s3_restore_region; then
		echo "Downloaded $LATEST to $tmp_restore_dir";
	else
		error_exit
	fi
   fi   
}

getbackupurl(){
echo "getbackupurl cmd = " wget -O $tmp_restore_dir/$restore_file $restore_base_url$restore_file
	if wget -O $tmp_restore_dir/$restore_file $restore_base_url$restore_file; then
		echo "Downloaded $restore_base_url$restore_file to $tmp_restore_dir";
	else
		error_exit
	fi
}



# Ensures that only a single instance is running at any time
LOCKFILE="{{ restore_script_dir }}/instance.lock"

(
        flock -n 200 || error_exit "Another backup script is already running. Exiting with error."
        trap "rm $LOCKFILE" EXIT
        main
) 200> $LOCKFILE