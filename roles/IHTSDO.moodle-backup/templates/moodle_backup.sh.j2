#!/usr/bin/env bash



# The following variables should be set by editing this script before running it:
# The S3 backup dir
s3_backup_dir="{{moodle_s3_backup_dir | default('')}}"
s3_backup_dir_full="s3://$s3_backup_dir"

s3_backup_region_base="{{moodle_s3_backup_region | default('')}}"
s3_numbackups=5
s3_bk_list=s3list.txt

s3_backup_region=""
if [ "x$s3_backup_region_base" != "x" ]; then
      s3_backup_region="--region $s3_backup_region_base"
      echo "setting backup region to $s3_backup_region"
fi

# The MySQL databsename used for creating the database dump
MYSQL_DBNAME="{{ moodle_db_name  }}"

# The MySQL username used for creating the database dump
MYSQL_USERNAME="{{ moodle_user }}"

# The password for the user given above
MYSQL_PASSWORD="{{ moodle_pw }}"

# The data root where all uploaded files are stored 
DATA_ROOT="{{ moodle_data_dir }}"

# The www root where all code is stored 
WWW_ROOT="{{ moodle_html_dir }}"

# The timestamp suffix for the top-level directory, eg. 20120904_1021
CURRENT_DATE=`date +%Y%m%d_%H%M`

# The starting directory
backup_dir="{{ moodle_backup_dir }}"

# The dir where zips go
tmp_backup_dir="$backup_dir/tmp"

# The working directory and the resulting archive file prefix
ARCHIVE_PREFIX="moodle_$(hostname -s)_$CURRENT_DATE"

# The absolute path to the above
ABSOLUTE_ARCHIVE_PREFIX="$tmp_backup_dir/$ARCHIVE_PREFIX"

# Checks input arguments and test whether the script is ready to be executed.
check_arguments() {
	if [ "x$DATA_ROOT" = "x" ]; then
		error_exit "Please set the variable DATA_ROOT before running this script. Exiting with error."
	fi

	if [ ! -d "$DATA_ROOT" ]; then
		error_exit "No directory could be found at '$DATA_ROOT'. Exiting with error."
	fi

	if [ "x$WWW_ROOT" = "x" ]; then
		error_exit "Please set the variable WWW_ROOT before running this script. Exiting with error."
	fi

	if [ ! -d "$WWW_ROOT" ]; then
		error_exit "No directory could be found at '$WWW_ROOT'. Exiting with error."
	fi
	
	if [ "x$s3_backup_dir" = "x" ]; then
		error_exit "Please set the variable s3_backup_dir before running this script. Exiting with error."
	fi
	
	if [ "x$MYSQL_DBNAME" = "x" ]; then
		error_exit "Please set the variable MYSQL_DBNAME before running this script. Exiting with error."
	fi

	if [ "x$MYSQL_USERNAME" = "x" ]; then
		error_exit "Please set the variable MYSQL_USERNAME before running this script. Exiting with error."
	fi
	
	if [ "x$MYSQL_PASSWORD" = "x" ]; then
		error_exit "Please set the variable MYSQL_PASSWORD before running this script. Exiting with error."
	fi
}

# Main script starts here.
main() {
	echo_date "----------------------------"
	check_arguments
	mkbkdir
	echo_date "Create backup destination directory '$ABSOLUTE_ARCHIVE_PREFIX'."
	mkdir -pv "$ABSOLUTE_ARCHIVE_PREFIX" || error_exit "Couldn't create directory '$ABSOLUTE_ARCHIVE_PREFIX'. Exiting with error."
	echo_date ""	

	backup_db
        backup_data_root
        backup_www_root
		

	echo_date "Creating archive..."
	cd "$tmp_backup_dir"
	tar  -zcf "$ARCHIVE_PREFIX.tar.gz" "$ARCHIVE_PREFIX" || error_exit "Archive creation failed; the backup is incomplete. Exiting with error."
        rm -r "$ARCHIVE_PREFIX"
	
	echo_date "Finished successfully."
        if [ -f ~/.aws/config ] && [ "$s3_backup_dir" != "" ];
         then
	  movetoaws
	  delete_old_from_aws
         fi
	exit 0
}

mkbkdir(){
# first delete if there
echo "should be deleting and recreating $tmp_backup_dir"
rm -rf $tmp_backup_dir
mkdir -pv $tmp_backup_dir

}



# Creates a db dump sql file and copies if to the archiva folder.
backup_db() {	
	cd "$tmp_backup_dir"
	DATABASE_DUMP_FILE="moodle.sql"
	
	echo_date "Creating SQL dump"
	mysqldump --user="$MYSQL_USERNAME" --password="$MYSQL_PASSWORD" "$MYSQL_DBNAME" > "$ABSOLUTE_ARCHIVE_PREFIX/$DATABASE_DUMP_FILE" || unlock_repository_and_exit "Couldn't create SQL dump Moodle. Exiting with error."	
	echo_date "Done backing up DB."
}


backup_data_root() {
echo_date "Backing up data root from $DATA_ROOT"
cp --recursive --parents  $DATA_ROOT $ABSOLUTE_ARCHIVE_PREFIX
}

backup_www_root() {
echo_date "Backing up www root from $WWW_ROOT"
cp --recursive --parents  $WWW_ROOT $ABSOLUTE_ARCHIVE_PREFIX
}


# Prints a message to stdout with the current date and time.
echo_date() {
	echo -e "[`date +\"%Y-%m-%d %H:%M:%S\"`] $@"
}

# Prints an error message to stderr and exits the script with a non-zero status.
error_exit() {
	echo -e "[`date +\"%Y-%m-%d %H:%M:%S\"`] $@" >&2
	exit 1
}


movetoaws(){
echo "s3_backup_dir = "$s3_backup_dir;
# sync to amazon if s3 dest is defined & the ~/.aws/config file exists
#if [ -f ~/.aws/config ] && [ "$s3_backup_dir" != "" ];
#then
echo "Transferring backup to AWS S3";
cd $tmp_backup_dir
for i in *; do /usr/bin/aws s3 cp $i $s3_backup_dir_full $s3_backup_region; done
echo "Backup transferred";
echo "Backup process complete";
#fi
}

delete_old_from_aws() { 
echo "Cleaning up old backups from aws"
cd $backup_dir
aws s3 ls $s3_backup_dir_full $s3_backup_region | grep '^20' | sort -k1,2 > $s3_bk_list

k=0
filename=""
while read line;do
((k++))
        echo "Line # $k: $line"
	if [ "$k" = "1" ]; then
              arr=($line)
              filename=${arr[3]}
	fi
                
done < $s3_bk_list
echo "Total number of lines in file: $k"
echo "s3_numbackups: $s3_numbackups"
echo "filename = $filename"

if [ $k \> $s3_numbackups ]; then
echo "number of backups exceeded. Deleting filename = $filename"
aws s3 rm $s3_backup_dir_full/$filename $s3_backup_region
echo "Deleted filename = $filename"
fi

}

# Ensures that only a single instance is running at any time
LOCKFILE="$backup_dir/instance.lock"

(
        flock -n 200 || error_exit "Another backup script is already running. Exiting with error."
        trap "rm $LOCKFILE" EXIT
        main
) 200> $LOCKFILE
