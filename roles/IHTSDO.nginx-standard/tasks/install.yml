---
- name: Install python-apt
  apt: name="python-apt" state=present

- name: Install python-selinux
  apt: name="python-selinux" state=present

- name: Add nginx root ppa apt_key
  apt_key: url=http://nginx.org/keys/nginx_signing.key state=present

- name: Add nginx mainline ppa
  apt_repository: repo='deb http://nginx.org/packages/mainline/ubuntu/ trusty nginx' state=present

- name: Install package
  apt: name=nginx state=installed update_cache=yes cache_valid_time=3600
  when: nginx_version == 'installed'

- name: Install latest package
  apt: name=nginx state=latest update_cache=yes cache_valid_time=3600
  when: nginx_version == 'latest'

- name: Install package specific version
  apt: name=nginx={{ nginx_version }} state=installed update_cache=yes cache_valid_time=3600
  when: nginx_version != 'installed' and nginx_version != 'latest'

- name: Pin nginx at a known version
  shell: "sudo apt-mark hold nginx"

- name: Remove the default site
  file: path=/etc/nginx/conf.d/default.conf state=absent
  notify:
    - reload nginx

- name: Copy the nginx configuration file
  template: src=nginx.conf.j2 dest=/etc/nginx/nginx.conf
  notify:
    - restart nginx

- name: Generate dhparams
  command: openssl dhparam -out /etc/nginx/dhparam.pem 2048 creates=/etc/nginx/dhparam.pem

- name: Create the configurations for sites
  template: src={{ inventory_dir }}/../files/nginx-sites/{{ item }} dest=/etc/nginx/conf.d/{{ item }}.conf
  with_items: "{{ nginx_sites_available }}"
  notify:
    - reload nginx

- name: start the nginx service
  service: name=nginx state=started
